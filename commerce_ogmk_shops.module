<?php
/**
 * @file
 * Code for the Commerce Marketplace Shops feature.
 */

include_once 'commerce_ogmk_shops.features.inc';

/**
 * Hooks.
 */

/**
 * Implements hook_menu().
 */
function commerce_ogmk_shops_menu() {
  $items['node/%node/manage'] = array(
    'title'            => 'My Shop',
    'access callback'  => '_commerce_ogmk_shops_shop_manage_access',
    'access arguments' => array(1),
    'page callback'    => '_commerce_ogmk_shops_shop_manage_page',
    'page arguments'   => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'commerce_ogmk_shops.pages.inc',
  );

  /**
   * Placeholder menu item for using in dropdown menus in parent items.
   *
   * @Issue(
   *   "The placeholder menu item might better be moved to a base module"
   *   type="improvement"
   *   priority="low"
   *   labels="modularity"
   * )
   */
  $items['ogmk/placeholder'] = array(
    'title'           => 'OGMK Placeholder',
    'access callback' => TRUE,
    'page callback'   => '_commerce_ogmk_shops_placeholder_page',
    'type'            => MENU_CALLBACK,
    'file'            => 'commerce_ogmk_shops.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_ogmk_shops_theme($existing, $type, $theme, $path) {
  return array(
    'shop_manage_page' => array(
      'variables' => array('variables' => NULL),
      'template'  => 'templates/pages/shop-manage',
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * @Issue(
 *   "Consider moving form alterations not related to shops to
 *   commerce_ogmk_products module"
 *   type="improvement"
 *   priority="low"
 *   labels="modularity"
 * )
 */
function commerce_ogmk_shops_form_alter(&$form, &$form_state, $form_id) {
  // Process the "Add to cart" forms. They start with
  // "commerce_cart_add_to_cart_form_".
  if (strpos($form_id, 'commerce_cart_add_to_cart_form_') !== 0) {
    return;
  }

  // Add a label for the select widget.
  $form['product_id']['#title'] = t('Variant');

  // Set the shop for the line item.
  // @Issue(
  //   "Set the shop on submit callback from the selected variant instead of
  //   the default one"
  //   type="bug"
  //   priority="low"
  // )
  $productId = null;
  if (!empty($form['product_id']['#value'])) {
    $productId = $form['product_id']['#value'];
  } elseif (!empty($form['product_id']['#default_value'])) {
    $productId = $form['product_id']['#default_value'];
  } else {
    throw new \Exception('Cannot get the product id for the line item');
  }
  $product = commerce_product_load($productId);

  $language = $form['line_item_fields']['og_shop_ref']['#language'];
  $form['line_item_fields']['og_shop_ref'][$language][0]['default']['#default_value'] = [$product->og_shop_ref[$product->language][0]['target_id']];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_ogmk_shops_form_shop_node_form_alter(&$form, &$form_state, $form_id) {
  /**
   * @Issue(
   *   "Check if the user is super admin using a helper function"
   *   type="improvement"
   *   priority="low"
   *   labels="refactoring"
   * )
   * @Issue(
   *   "Revision and translation information should be available to the
   *   appropriate roles"
   *   type="bug"
   *   priority="normal"
   * )
   */
  global $user;
  if ($user->uid !== 1) {
    // Shops should not be deleted.
    $form['actions']['delete']['#access'] = FALSE;

    // Do not display translation and revision field groups.
    $form['revision_information']['#access'] = FALSE;
    $form['translation']['#access'] = FALSE;
  }

  // Add a Cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#attributes' => array('onClick' => 'history.go(-1);return true;'),
    '#weight' => 6,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @Issue(
 *   "Consider moving form alterations not related to shops to
 *   commerce_ogmk_products module"
 *   type="improvement"
 *   priority="low"
 *   labels="modularity"
 * )
 */
function commerce_ogmk_shops_form_product_node_form_alter(&$form, &$form_state, $form_id) {
  // Code specific to the edit form.
  if ($form['nid']['#value']) {
    // @Issue(
    //   "Hide the translation vertical tab"
    //   type="improvement"
    //   priority="normal"
    // )
  }

  // Code specific to the add form.
  if ($form['nid']['#value'] === NULL) {
    // Pre-populate the og_shop_ref field.

    // Get the shop that belongs to the logged in user.
    $shopId = commerce_ogmk_shops_user_has_shop();

    // Access denied if there is no shop for the logged in user.
    if (!$shopId) {
      // @Issue("Throw an Access Denied page or message")
    }

    // Pre-populate the og_shop_ref field.
    $language = $form['og_shop_ref']['#language'];
    $form['og_shop_ref'][$language][0]['default']['#default_value'] = $shopId;
  }

  // Deny access to og_shop_ref field, unless the user is the administrator.
  /**
   * @Issue(
   *   "Check if the user is super admin using a helper function"
   *   type="improvement"
   *   priority="low"
   *   labels="refactoring"
   * )
   * @Issue(
   *   "Revision and translation information should be available to the
   *   appropriate roles"
   *   type="bug"
   *   priority="normal"
   * )
   */
  global $user;
  if ((int) $user->uid !== 1) {
    $form['og_shop_ref']['#access'] = FALSE;

    // Do not display translation and revision field groups.
    $form['revision_information']['#access'] = FALSE;
    $form['translation']['#access'] = FALSE;

    // Products should not be deleted.
    /**
     * @Issue(
     *   "Such permissions should be controlled at og level"
     *   type="bug"
     * )
     */
    if ($user->uid != 1) {
      $form['actions']['delete']['#access'] = FALSE;
    }
  }

  // Add a Cancel button.
  $form['actions']['cancel'] = array(
    '#type' => 'button',
    '#access' => TRUE,
    '#value' => t('Cancel'),
    '#attributes' => array('onClick' => 'history.go(-1);return true;'),
    '#weight' => 6,
  );

  /**
   * @Issue(
   *   "The user should be redirected to the newly created product upon
   *   submission"
   *   type="improvement"
   *   priority="normal"
   *   labels="ux"
   * )
   */
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function commerce_ogmk_shops_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  // Set the shop field "og_shop_ref" in the product ("commerce_product").
  // For now there is only manager per shop, the owner, so the shop would always
  // be the logged in user's shop.
  if ($entity_form['#entity_type'] !== 'commerce_product') {
    return;
  }

  $entity_form['#theme'] = ['product_product_ief_form'];
  $entity_form['og_shop_ref']['#access'] = FALSE;

  // Get the Shop owned by the user.
  $shopId = commerce_ogmk_shops_user_has_shop();

  // Access denied no results found - the user is not a shop owner and therefore
  // can't create products.
  if (empty($shop)) {
    // @Issue(
    //   "Throw an Access Denied page or message"
    //   type="bug"
    //   priority="normal"
    //   labels="security"
    // )
  }

  // Pre-populate the og_shop_ref field.
  $language = $entity_form['og_shop_ref']['#language'];
  $entity_form['og_shop_ref'][$language][0]['default']['#default_value'] = $shopId;
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_ogmk_shops_entity_info_alter(&$entity_info) {
  /**
   * @Issue(
   *   "Maybe this should be moved to a base ogmk module"
   *   type="task"
   *   priority="low"
   *   labels="modularity"
   * )
   */
  $entity_info['node']['view modes']['ogmk_manage_teaser'] = array(
    'label' => t('OGMK Management Teaser'),
    'custom settings' => FALSE,
  );
}

/**
 * Public API.
 */

/**
 * @param int|object $user
 *   The user id or object for whom to check if there is a shop.
 *   If NULL is given, the logged in user will be checked for.
 *
 * @return int
 *   Zero (0) if there is no shop owned by the user.
 *   The shop's id otherwise.
 */
function commerce_ogmk_shops_user_has_shop($user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  $userId = NULL;
  if (is_int($user)) {
    $userId = $user;
  } else {
    $userId = $user->uid;
  }

  // Anonymous users can't have shops.
  if ($userId === 0) {
    return FALSE;
  }

  // Get the Shop owned by the user.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('uid', $userId)
    ->propertyCondition('type', 'shop');
  $result = $query->execute();

  if (empty($result['node'])) {
    return 0;
  }

  // Get the first key of the result array because there should be only one
  // result.
  return key($result['node']);
}

/**
 * @param int|object $user
 *   The user id or object for whom to check if there is a shop.
 *   If NULL is given, the logged in user will be checked.
 *
 * @return null|object
 *   NULL if there is no shop owned by the user.
 *   The shop's object otherwise.
 */
function commerce_ogmk_shops_user_get_shop($user = NULL) {
  $shopId = commerce_ogmk_shops_user_has_shop($user);

  if ($shopId) {
    return node_load($shopId);
  }

  return NULL;
}

/**
 * Functions for internal use.
 */

/**
 * Access callback for the shop management page.
 *
 * @param object $shop
 *   The shop for which to display the management page.
 *
 * @return boolean
 *   Whether the current user has access or not to the shop management page.
 */
function _commerce_ogmk_shops_shop_manage_access($shop) {
  if ($shop->type !== 'shop') {
    return FALSE;
  }

  /**
   * @Issue(
   *   "Check if the user is super admin with a helper function"
   *   type="improvement"
   *   priority="normal"
   * )
   * @Issue(
   *   "Properly check permissions through OG"
   *   type="improvement"
   *   priority="normal"
   * )
   */
  global $user;
  if ($user->uid == 1 || $shop->uid === $user->uid) {
    return TRUE;
  }

  return FALSE;
}
