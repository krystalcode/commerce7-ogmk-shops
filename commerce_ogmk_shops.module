<?php
/**
 * @file
 * Code for the Commerce Marketplace Shops feature.
 */

include_once 'commerce_ogmk_shops.features.inc';

/**
 * Hooks.
 */

/**
 * Implements hook_menu().
 */
function commerce_ogmk_shops_menu() {
  $items['node/%node/manage'] = array(
    'title'            => 'My Shop',
    'access callback'  => '_commerce_ogmk_shops_shop_manage_access',
    'access arguments' => array(1),
    'page callback'    => '_commerce_ogmk_shops_shop_manage_page',
    'page arguments'   => array(1),
    'type'             => MENU_LOCAL_TASK,
    'file'             => 'commerce_ogmk_shops.pages.inc',
  );

  /**
   * Placeholder menu item for using in dropdown menus in parent items.
   *
   * @Issue(
   *   "The placeholder menu item might better be moved to a base module"
   *   type="improvement"
   *   priority="low"
   *   labels="modularity"
   * )
   */
  $items['ogmk/placeholder'] = array(
    'title'           => 'OGMK Placeholder',
    'access callback' => TRUE,
    'page callback'   => '_commerce_ogmk_shops_placeholder_page',
    'type'            => MENU_CALLBACK,
    'file'            => 'commerce_ogmk_shops.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_ogmk_shops_theme($existing, $type, $theme, $path) {
  return array(
    'shop_manage_page' => array(
      'variables' => array('variables' => NULL),
      'template'  => 'templates/pages/shop-manage',
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function commerce_ogmk_shops_entity_info_alter(&$entity_info) {
  /**
   * @Issue(
   *   "Maybe this should be moved to a base ogmk module"
   *   type="task"
   *   priority="low"
   *   labels="modularity"
   * )
   */
  $entity_info['node']['view modes']['ogmk_manage_teaser'] = array(
    'label' => t('OGMK Management Teaser'),
    'custom settings' => FALSE,
  );
}

/**
 * Functions for public use.
 */

/**
 * @param int|object $user
 *   The user id or object for whom to check if there is a shop.
 *   If NULL is given, the logged in user will be checked for.
 *
 * @return int
 *   Zero (0) if there is no shop owned by the user.
 *   The shop's id otherwise.
 */
function commerce_ogmk_shops_user_has_shop($user = NULL) {
  if ($user === NULL) {
    global $user;
  }

  $userId = NULL;
  if (is_int($user)) {
    $userId = $user;
  } else {
    $userId = $user->uid;
  }

  // Anonymous users can't have shops.
  if ($userId === 0) {
    return FALSE;
  }

  // Get the Shop owned by the user.
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node', '=')
    ->propertyCondition('uid', $userId)
    ->propertyCondition('type', 'shop');
  $result = $query->execute();

  if (empty($result['node'])) {
    return 0;
  }

  // Get the first key of the result array because there should be only one
  // result.
  return key($result['node']);
}

/**
 * @param int|object $user
 *   The user id or object for whom to check if there is a shop.
 *   If NULL is given, the logged in user will be checked.
 *
 * @return null|object
 *   NULL if there is no shop owned by the user.
 *   The shop's object otherwise.
 */
function commerce_ogmk_shops_user_get_shop($user = NULL) {
  $shopId = commerce_ogmk_shops_user_has_shop($user);

  if ($shopId) {
    return node_load($shopId);
  }

  return NULL;
}

/**
 * Functions for internal use.
 */

/**
 * Access callback for the shop management page.
 *
 * @param object $shop
 *   The shop for which to display the management page.
 *
 * @return boolean
 *   Whether the current user has access or not to the shop management page.
 */
function _commerce_ogmk_shops_shop_manage_access($shop) {
  if ($shop->type !== 'shop') {
    return FALSE;
  }

  global $user;
  if ($user->uid === 1 || $shop->uid === $user->uid) {
    return TRUE;
  }

  return FALSE;
}
